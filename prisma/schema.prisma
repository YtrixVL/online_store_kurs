generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:root@localhost:5432/online"
}

model orderdetails {
  orderdetailid Int       @id @default(autoincrement())
  orderid       Int?
  itemid        String?
  price         Int?
  quantity      Int?
  total         Int?
  orders        orders?   @relation(fields: [orderid], references: [orderid], onDelete: NoAction, onUpdate: NoAction)
  items         items?    @relation(fields: [itemid], references: [itemid], onDelete: NoAction, onUpdate: NoAction)
}

model orders {
  orderid      Int            @id @default(autoincrement())
  userid       String?
  orderdate    DateTime?      @default(now()) @db.Date
  fulfilled    Boolean?
  deleted      Boolean?
  orderdetails orderdetails[]
  users        users?         @relation(fields: [userid], references: [userid], onDelete: NoAction, onUpdate: NoAction)
}

model items {
  itemid                String          @id @default(uuid())
  name                  String          @db.VarChar(255)
  price                 Int
  instock               Boolean
  supplierid            Int?
  discountavailable     Boolean?
  discount              Int?
  itemtype              itemtype?
  color                 String?         @db.Char(7)
  about                 String?          
  itemsize              String[]
  photo                 String[]
  dateCreated           DateTime?       @default(now())
  orderdetails          orderdetails[]
  suppliers             suppliers?      @relation(fields: [supplierid], references: [supplierid], onDelete: NoAction, onUpdate: NoAction)
  ratings               ratings[]
  wishlistitems         wishlistitems[]
}

model suppliers {
  supplierid  Int          @id @default(autoincrement())
  companyname String       @db.VarChar(255)
  logo        String?
  itemtype    itemtype[]
  items       items[]
}

model ratings {
  ratingid  Int       @id @default(autoincrement())
  userid    String?
  itemid    String?
  rating    Int
  users     users?    @relation(fields: [userid], references: [userid], onDelete: NoAction, onUpdate: NoAction)
  items     items?    @relation(fields: [itemid], references: [itemid], onDelete: NoAction, onUpdate: NoAction)
}

model wishlists {
  wishlistid    Int             @id @default(autoincrement())
  userid        String?
  users         users?          @relation(fields: [userid], references: [userid], onDelete: NoAction, onUpdate: NoAction)
  wishlistitems wishlistitems[]
}

model wishlistitems {
  wishlistid Int
  itemid  String
  wishlists  wishlists @relation(fields: [wishlistid], references: [wishlistid], onDelete: NoAction, onUpdate: NoAction)
  items      items     @relation(fields: [itemid], references: [itemid], onDelete: NoAction, onUpdate: NoAction)

  @@unique([wishlistid, itemid])
}

model users {
  userid      String      @id @default(uuid())
  username    String      @db.VarChar(255)
  password    String      @db.VarChar(255)
  privileges  String      @default("default") @db.VarChar(100)
  email       String?     @db.VarChar(255)
  lastname    String?     @db.VarChar(255)
  firstname   String?     @db.VarChar(255)
  birthdate   DateTime?   @db.Date
  country     String?     @db.VarChar(100)
  city        String?     @db.VarChar(100)
  postalcode  Int?
  address     String?     @db.VarChar(255)
  datecreated DateTime?   @default(now()) @db.Timestamp(0)
  orders      orders[]
  ratings     ratings[]
  wishlists   wishlists[]
}

enum itemtype {
  CROSS_COUNTRY
  BASKETBALL
  FOOTBALL
  EVERYDAY
  TENNIS
  FOR_FITNESS
  SKATER
  FOR_TOURISM
}